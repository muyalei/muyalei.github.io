整个开机流程：
1. 加载 BIOS 的硬件信息，并取得第一个开机装置的代号；  
2. 读取第一个开机装置的 MBR 的 boot Loader (亦即是 lilo, grub, spfdisk 等等) 的开机信息；  
3. 加载 Kernel 操作系统核心信息， Kernel 开始解压缩，并且尝试驱动所有硬件装置；  
4. Kernel 执行 init 程序并取得 run-level 信息；  
5. init 执行 /etc/rc.d/rc.sysinit 档案；  
6. 启动核心的外挂模块 (/etc/modprobe.conf)；  
7. init 执行 run-level 的各个批次档( Scripts )；  
8. init 执行 /etc/rc.d/rc.local 档案；  
9. 执行 /bin/login 程序，并等待使用者登入；  
10. 登入之后开始以 Shell 控管主机。 

核心档案存放位置是/boot/vmlinuz
 
Boot Loader： 开机管理程序，如grub、LILO、spfdisk。作用是，代替操作系统（操作系统还没有起来），辨识并读取filesystem中的数据，加载kernel
POST：power on self test ，开机自我测试。
MBR:Master Boot Record,主要开机扇区，每颗硬盘的第一个扇区称为MBR。

BIOS： Basic Input Output System ，记录了主机板上各芯片组硬件的设定信息，如cpu与接口设备的沟通频率、接口设备的I/O地
址等等，系统读取BIOS信息后进行POST,之后，BIOS中记录了可以用来开机的装置的搜寻顺序，开机流程根据BIOS指引读取指定硬盘，该硬盘
首先被读取的是MBR，硬件系统根据MBR中安装的boot loader读取filesystem，加载kernel，kernel被解压缩到内存中，kernel根据BIOS中记录
的主机硬件数据进行检测并加载相关驱动程序（driver），开始等待程序的执行。

/sbin/init ，第一支被执行的程序，根据设定文件/etc/inittab中的设定，取得开机等级run-level，再根据run-level进行不同的开机服务
启动，取得不同的环境。
id：3：initdefault： 行中的3表示系统开机默认run-level。命令runlevel查看系统当前的runlevel。
init number ，切换开机等级。如x-window界面下切换到纯文本界面，执行init 3 。
0  系统直接关机
1  单人维护模式
2  同纯文字模式，但是没有NFS服务
3  纯文字模式
4  系统保留
5  x-window界面，图形化界面启动
6  reboot

/etc/rc.d/rc.sysinit ，在/etc/inittab中指定该脚本位置，使用该shell script进行系统环境初始化设定，包括设定时间、将内存装置/proc挂载等，
至此，系统已经可以流畅的跑起来了。这个shell script 中很多工作的预设定文件在/etc/sysconfig文件中。之后根据run-level启动相关
的开机服务。
/proc ，内存装置； /sys，USB装置。

/etc/rc.d/rc*.d，/etc/inittab文件中指定该脚本位置，不同run-level下启动对应的系统服务项目的shell script 位置。根据不同的run-level启动对应的系统服务项目。
/etc/rc.d/rc*.d 该目录下是由/etc/rc.d/init.d下文件连结而来，/etc/rc.d/init/和/etc/init.d 目录下，对某一系统服务进行管理可以使用/etc/rc.d/init.d/服务 start 
或/etc/init.d/服务 stop

/etc/rc.d/rc.local 用户自定义的需要开机启动的程序或执行的命令写在该目录下，即可在开机时被执行。开机启动的系统服务程序写在了/etc/rc.d/init.d
中，被连结到/etc/rc.d/rc*.d ，执行不同的run-level开机时即启动不同的系统服务项目。

/etc/inittab中run-level对应的系统服务全部启动后，即加载终端机或x-window，执行/sbin/mingetty 开启联机等待用户登录。

/etc/sysconfig 大多数系统服务的设定文档


查看系统核心信息：uname -a 或者/proc/version











































